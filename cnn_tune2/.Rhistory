install.packages("ggplot2")
install.packages("tidyverse")
install.packages("ggpubr")
install.packages("caret")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("randomForestExplainer")
install.packages("glmnet")
install.packages("ROCR")
install.packages("readr")
install.packages("knitr")
install.packages("knitLatex")
install.packages("knitcitations")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("naniar")
remotes::install_github("rstudio/tensorflow")
install.packages("remotes")
install.packages("reticulate")
remotes::install_github("rstudio/tensorflow")
reticulate::install_miniconda()
tensorflow::install_tensorflow()
install.packages("devtools")
use_condaenv("miniconda3", required = TRUE)
install.packages('keras')
#install.packages('tensorflow')
library(keras)
library(tensorflow)
install_keras()
library(keras)
library(tensorflow)
library(tidyverse)
library(ggplot2)
#install_tensorflow()
devtools::install_github("rstudio/keras")
library(tfdatasets)
library(ggplot2)
df <- load(diamonds)
head(df)
df <- diamonds
head(df)
df$cut <- as.factor(df$cut)
ggplot(data=df, aes(x=price)) +
geom_histogram(fill="purple", alpha=0.3) +
facet_wrap(~cut) +
theme_bw()
?savePlot
p1 <- ggplot(data=df, aes(x=price)) +
geom_histogram(fill="purple", alpha=0.3) +
facet_wrap(~cut) +
theme_bw()
savePlot(p1, filename = "diamond.png")
ggsave(filename = "dhist.png", plot = p1)
dir()
dir()
getwd()
library(tidyverse)
x <- seq(1, 100, 1)
y <- rnorm(n=100)
z <- as.data.frame(x, y)
ggplot(z, aes(x=x, y=y)) +
geom_point(col="red") +
theme_bw()
ggplot(z, aes(x=y)) +
stat_bin(geom="step", col="blue") + theme_bw()
install.packages("patchwork")
install.packages("gridExtra")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(ggpubr)
setwd("~/Documents/cnn_tune2")
dir()
df <- read.csv("tune2.csv")
names(df)
str(df)
# Lets rename some of the variable names
df1 <- df %>% rename(MaxPoolSize=poolsize)
View(df1)
unique(df1$kernel_size)
unique(df1$MaxPoolSize)
unique(df1$Dropout_1)
unique(df1$Activation_conv2D)
unique(df1$Filters)
unique(df1$Dropout_2)
unique(df1$Hidden_neurons)
unique(df1$Dense_Activation)
ggplot(data = df1) +
geom_point(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation))+
theme_bw()
ggplot(data = df1) +
geom_point(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation))+
geom_line(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation)) +
facet_grid(Dropout_2~Filters) +
theme_bw()
ggplot(data = df1) +
geom_point(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation))+
geom_line(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation)) +
facet_grid(Dropout_2~Filters) +
labs(x="Number of hidden neurons", y="Validation AUC (Precision-Recall)") +
theme_bw()
ggplot(data = df1) +
geom_point(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation))+
geom_line(aes(x=Hidden_neurons, y=val_auc_pr, col=Dense_Activation)) +
facet_grid(Dropout_2~Filters) +
labs(x="Number of hidden neurons", y="Validation AUC (Precision-Recall)") +
theme_bw()
ggplot(data = df1) +
geom_point(aes(x=Hidden_neurons, y=val_acc, col=Dense_Activation))+
geom_line(aes(x=Hidden_neurons, y=val_acc, col=Dense_Activation)) +
facet_grid(Dropout_2~Filters) +
labs(x="Number of hidden neurons", y="Validation Accuracy") +
theme_bw()
df1 %>% arrange(desc(val_auc_pr))
